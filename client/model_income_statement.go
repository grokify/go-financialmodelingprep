/*
Financial Modeling Prep API

FMP provides one of the most accurate data available on the market. Every endpoint is available in JSON format and most of them also in CSV format. Data is coming right from SEC filings after being serialized by us. Our API has over 50 endpoints and we are still growing by adding new endpoints every week. We also provide on demand custom endpoint available for our business clients.

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// IncomeStatement Income Statement
type IncomeStatement struct {
	AcceptedDate                            *string  `json:"acceptedDate,omitempty"`
	CalendarYear                            *string  `json:"calendarYear,omitempty"`
	Cik                                     *string  `json:"cik,omitempty"`
	CostAndExpenses                         *float32 `json:"costAndExpenses,omitempty"`
	CostOfRevenue                           *float32 `json:"costOfRevenue,omitempty"`
	Date                                    *string  `json:"date,omitempty"`
	DepreciationAndAmortization             *float32 `json:"depreciationAndAmortization,omitempty"`
	Ebitda                                  *float32 `json:"ebitda,omitempty"`
	Ebitdaratio                             *float32 `json:"ebitdaratio,omitempty"`
	Eps                                     *float32 `json:"eps,omitempty"`
	Epsdiluted                              *float32 `json:"epsdiluted,omitempty"`
	FillingDate                             *string  `json:"fillingDate,omitempty"`
	FinalLink                               *string  `json:"finalLink,omitempty"`
	GeneralAndAdministrativeExpenses        *float32 `json:"generalAndAdministrativeExpenses,omitempty"`
	GrossProfit                             *float32 `json:"grossProfit,omitempty"`
	GrossProfitRatio                        *float32 `json:"grossProfitRatio,omitempty"`
	IncomeBeforeTax                         *float32 `json:"incomeBeforeTax,omitempty"`
	IncomeBeforeTaxRatio                    *float32 `json:"incomeBeforeTaxRatio,omitempty"`
	IncomeTaxExpense                        *float32 `json:"incomeTaxExpense,omitempty"`
	InterestExpense                         *float32 `json:"interestExpense,omitempty"`
	InterestIncome                          *float32 `json:"interestIncome,omitempty"`
	Interestincome                          *float32 `json:"interestincome,omitempty"`
	Link                                    *string  `json:"link,omitempty"`
	NetIncome                               *float32 `json:"netIncome,omitempty"`
	NetIncomeRatio                          *float32 `json:"netIncomeRatio,omitempty"`
	OperatingExpenses                       *float32 `json:"operatingExpenses,omitempty"`
	OperatingIncome                         *float32 `json:"operatingIncome,omitempty"`
	OperatingIncomeRatio                    *float32 `json:"operatingIncomeRatio,omitempty"`
	OtherExpenses                           *float32 `json:"otherExpenses,omitempty"`
	Period                                  *string  `json:"period,omitempty"`
	ReportedCurrency                        *string  `json:"reportedCurrency,omitempty"`
	ResearchAndDevelopmentExpenses          *float32 `json:"researchAndDevelopmentExpenses,omitempty"`
	Revenue                                 *float32 `json:"revenue,omitempty"`
	SellingAndMarketingExpenses             *float32 `json:"sellingAndMarketingExpenses,omitempty"`
	SellingGeneralAndAdministrativeExpenses *float32 `json:"sellingGeneralAndAdministrativeExpenses,omitempty"`
	Symbol                                  *string  `json:"symbol,omitempty"`
	TotalOtherIncomeExpensesNet             *float32 `json:"totalOtherIncomeExpensesNet,omitempty"`
	WeightedAverageShsOut                   *float32 `json:"weightedAverageShsOut,omitempty"`
	WeightedAverageShsOutDil                *float32 `json:"weightedAverageShsOutDil,omitempty"`
}

// NewIncomeStatement instantiates a new IncomeStatement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncomeStatement() *IncomeStatement {
	this := IncomeStatement{}
	return &this
}

// NewIncomeStatementWithDefaults instantiates a new IncomeStatement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncomeStatementWithDefaults() *IncomeStatement {
	this := IncomeStatement{}
	return &this
}

// GetAcceptedDate returns the AcceptedDate field value if set, zero value otherwise.
func (o *IncomeStatement) GetAcceptedDate() string {
	if o == nil || o.AcceptedDate == nil {
		var ret string
		return ret
	}
	return *o.AcceptedDate
}

// GetAcceptedDateOk returns a tuple with the AcceptedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetAcceptedDateOk() (*string, bool) {
	if o == nil || o.AcceptedDate == nil {
		return nil, false
	}
	return o.AcceptedDate, true
}

// HasAcceptedDate returns a boolean if a field has been set.
func (o *IncomeStatement) HasAcceptedDate() bool {
	if o != nil && o.AcceptedDate != nil {
		return true
	}

	return false
}

// SetAcceptedDate gets a reference to the given string and assigns it to the AcceptedDate field.
func (o *IncomeStatement) SetAcceptedDate(v string) {
	o.AcceptedDate = &v
}

// GetCalendarYear returns the CalendarYear field value if set, zero value otherwise.
func (o *IncomeStatement) GetCalendarYear() string {
	if o == nil || o.CalendarYear == nil {
		var ret string
		return ret
	}
	return *o.CalendarYear
}

// GetCalendarYearOk returns a tuple with the CalendarYear field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetCalendarYearOk() (*string, bool) {
	if o == nil || o.CalendarYear == nil {
		return nil, false
	}
	return o.CalendarYear, true
}

// HasCalendarYear returns a boolean if a field has been set.
func (o *IncomeStatement) HasCalendarYear() bool {
	if o != nil && o.CalendarYear != nil {
		return true
	}

	return false
}

// SetCalendarYear gets a reference to the given string and assigns it to the CalendarYear field.
func (o *IncomeStatement) SetCalendarYear(v string) {
	o.CalendarYear = &v
}

// GetCik returns the Cik field value if set, zero value otherwise.
func (o *IncomeStatement) GetCik() string {
	if o == nil || o.Cik == nil {
		var ret string
		return ret
	}
	return *o.Cik
}

// GetCikOk returns a tuple with the Cik field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetCikOk() (*string, bool) {
	if o == nil || o.Cik == nil {
		return nil, false
	}
	return o.Cik, true
}

// HasCik returns a boolean if a field has been set.
func (o *IncomeStatement) HasCik() bool {
	if o != nil && o.Cik != nil {
		return true
	}

	return false
}

// SetCik gets a reference to the given string and assigns it to the Cik field.
func (o *IncomeStatement) SetCik(v string) {
	o.Cik = &v
}

// GetCostAndExpenses returns the CostAndExpenses field value if set, zero value otherwise.
func (o *IncomeStatement) GetCostAndExpenses() float32 {
	if o == nil || o.CostAndExpenses == nil {
		var ret float32
		return ret
	}
	return *o.CostAndExpenses
}

// GetCostAndExpensesOk returns a tuple with the CostAndExpenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetCostAndExpensesOk() (*float32, bool) {
	if o == nil || o.CostAndExpenses == nil {
		return nil, false
	}
	return o.CostAndExpenses, true
}

// HasCostAndExpenses returns a boolean if a field has been set.
func (o *IncomeStatement) HasCostAndExpenses() bool {
	if o != nil && o.CostAndExpenses != nil {
		return true
	}

	return false
}

// SetCostAndExpenses gets a reference to the given float32 and assigns it to the CostAndExpenses field.
func (o *IncomeStatement) SetCostAndExpenses(v float32) {
	o.CostAndExpenses = &v
}

// GetCostOfRevenue returns the CostOfRevenue field value if set, zero value otherwise.
func (o *IncomeStatement) GetCostOfRevenue() float32 {
	if o == nil || o.CostOfRevenue == nil {
		var ret float32
		return ret
	}
	return *o.CostOfRevenue
}

// GetCostOfRevenueOk returns a tuple with the CostOfRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetCostOfRevenueOk() (*float32, bool) {
	if o == nil || o.CostOfRevenue == nil {
		return nil, false
	}
	return o.CostOfRevenue, true
}

// HasCostOfRevenue returns a boolean if a field has been set.
func (o *IncomeStatement) HasCostOfRevenue() bool {
	if o != nil && o.CostOfRevenue != nil {
		return true
	}

	return false
}

// SetCostOfRevenue gets a reference to the given float32 and assigns it to the CostOfRevenue field.
func (o *IncomeStatement) SetCostOfRevenue(v float32) {
	o.CostOfRevenue = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *IncomeStatement) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *IncomeStatement) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *IncomeStatement) SetDate(v string) {
	o.Date = &v
}

// GetDepreciationAndAmortization returns the DepreciationAndAmortization field value if set, zero value otherwise.
func (o *IncomeStatement) GetDepreciationAndAmortization() float32 {
	if o == nil || o.DepreciationAndAmortization == nil {
		var ret float32
		return ret
	}
	return *o.DepreciationAndAmortization
}

// GetDepreciationAndAmortizationOk returns a tuple with the DepreciationAndAmortization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetDepreciationAndAmortizationOk() (*float32, bool) {
	if o == nil || o.DepreciationAndAmortization == nil {
		return nil, false
	}
	return o.DepreciationAndAmortization, true
}

// HasDepreciationAndAmortization returns a boolean if a field has been set.
func (o *IncomeStatement) HasDepreciationAndAmortization() bool {
	if o != nil && o.DepreciationAndAmortization != nil {
		return true
	}

	return false
}

// SetDepreciationAndAmortization gets a reference to the given float32 and assigns it to the DepreciationAndAmortization field.
func (o *IncomeStatement) SetDepreciationAndAmortization(v float32) {
	o.DepreciationAndAmortization = &v
}

// GetEbitda returns the Ebitda field value if set, zero value otherwise.
func (o *IncomeStatement) GetEbitda() float32 {
	if o == nil || o.Ebitda == nil {
		var ret float32
		return ret
	}
	return *o.Ebitda
}

// GetEbitdaOk returns a tuple with the Ebitda field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetEbitdaOk() (*float32, bool) {
	if o == nil || o.Ebitda == nil {
		return nil, false
	}
	return o.Ebitda, true
}

// HasEbitda returns a boolean if a field has been set.
func (o *IncomeStatement) HasEbitda() bool {
	if o != nil && o.Ebitda != nil {
		return true
	}

	return false
}

// SetEbitda gets a reference to the given float32 and assigns it to the Ebitda field.
func (o *IncomeStatement) SetEbitda(v float32) {
	o.Ebitda = &v
}

// GetEbitdaratio returns the Ebitdaratio field value if set, zero value otherwise.
func (o *IncomeStatement) GetEbitdaratio() float32 {
	if o == nil || o.Ebitdaratio == nil {
		var ret float32
		return ret
	}
	return *o.Ebitdaratio
}

// GetEbitdaratioOk returns a tuple with the Ebitdaratio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetEbitdaratioOk() (*float32, bool) {
	if o == nil || o.Ebitdaratio == nil {
		return nil, false
	}
	return o.Ebitdaratio, true
}

// HasEbitdaratio returns a boolean if a field has been set.
func (o *IncomeStatement) HasEbitdaratio() bool {
	if o != nil && o.Ebitdaratio != nil {
		return true
	}

	return false
}

// SetEbitdaratio gets a reference to the given float32 and assigns it to the Ebitdaratio field.
func (o *IncomeStatement) SetEbitdaratio(v float32) {
	o.Ebitdaratio = &v
}

// GetEps returns the Eps field value if set, zero value otherwise.
func (o *IncomeStatement) GetEps() float32 {
	if o == nil || o.Eps == nil {
		var ret float32
		return ret
	}
	return *o.Eps
}

// GetEpsOk returns a tuple with the Eps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetEpsOk() (*float32, bool) {
	if o == nil || o.Eps == nil {
		return nil, false
	}
	return o.Eps, true
}

// HasEps returns a boolean if a field has been set.
func (o *IncomeStatement) HasEps() bool {
	if o != nil && o.Eps != nil {
		return true
	}

	return false
}

// SetEps gets a reference to the given float32 and assigns it to the Eps field.
func (o *IncomeStatement) SetEps(v float32) {
	o.Eps = &v
}

// GetEpsdiluted returns the Epsdiluted field value if set, zero value otherwise.
func (o *IncomeStatement) GetEpsdiluted() float32 {
	if o == nil || o.Epsdiluted == nil {
		var ret float32
		return ret
	}
	return *o.Epsdiluted
}

// GetEpsdilutedOk returns a tuple with the Epsdiluted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetEpsdilutedOk() (*float32, bool) {
	if o == nil || o.Epsdiluted == nil {
		return nil, false
	}
	return o.Epsdiluted, true
}

// HasEpsdiluted returns a boolean if a field has been set.
func (o *IncomeStatement) HasEpsdiluted() bool {
	if o != nil && o.Epsdiluted != nil {
		return true
	}

	return false
}

// SetEpsdiluted gets a reference to the given float32 and assigns it to the Epsdiluted field.
func (o *IncomeStatement) SetEpsdiluted(v float32) {
	o.Epsdiluted = &v
}

// GetFillingDate returns the FillingDate field value if set, zero value otherwise.
func (o *IncomeStatement) GetFillingDate() string {
	if o == nil || o.FillingDate == nil {
		var ret string
		return ret
	}
	return *o.FillingDate
}

// GetFillingDateOk returns a tuple with the FillingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetFillingDateOk() (*string, bool) {
	if o == nil || o.FillingDate == nil {
		return nil, false
	}
	return o.FillingDate, true
}

// HasFillingDate returns a boolean if a field has been set.
func (o *IncomeStatement) HasFillingDate() bool {
	if o != nil && o.FillingDate != nil {
		return true
	}

	return false
}

// SetFillingDate gets a reference to the given string and assigns it to the FillingDate field.
func (o *IncomeStatement) SetFillingDate(v string) {
	o.FillingDate = &v
}

// GetFinalLink returns the FinalLink field value if set, zero value otherwise.
func (o *IncomeStatement) GetFinalLink() string {
	if o == nil || o.FinalLink == nil {
		var ret string
		return ret
	}
	return *o.FinalLink
}

// GetFinalLinkOk returns a tuple with the FinalLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetFinalLinkOk() (*string, bool) {
	if o == nil || o.FinalLink == nil {
		return nil, false
	}
	return o.FinalLink, true
}

// HasFinalLink returns a boolean if a field has been set.
func (o *IncomeStatement) HasFinalLink() bool {
	if o != nil && o.FinalLink != nil {
		return true
	}

	return false
}

// SetFinalLink gets a reference to the given string and assigns it to the FinalLink field.
func (o *IncomeStatement) SetFinalLink(v string) {
	o.FinalLink = &v
}

// GetGeneralAndAdministrativeExpenses returns the GeneralAndAdministrativeExpenses field value if set, zero value otherwise.
func (o *IncomeStatement) GetGeneralAndAdministrativeExpenses() float32 {
	if o == nil || o.GeneralAndAdministrativeExpenses == nil {
		var ret float32
		return ret
	}
	return *o.GeneralAndAdministrativeExpenses
}

// GetGeneralAndAdministrativeExpensesOk returns a tuple with the GeneralAndAdministrativeExpenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetGeneralAndAdministrativeExpensesOk() (*float32, bool) {
	if o == nil || o.GeneralAndAdministrativeExpenses == nil {
		return nil, false
	}
	return o.GeneralAndAdministrativeExpenses, true
}

// HasGeneralAndAdministrativeExpenses returns a boolean if a field has been set.
func (o *IncomeStatement) HasGeneralAndAdministrativeExpenses() bool {
	if o != nil && o.GeneralAndAdministrativeExpenses != nil {
		return true
	}

	return false
}

// SetGeneralAndAdministrativeExpenses gets a reference to the given float32 and assigns it to the GeneralAndAdministrativeExpenses field.
func (o *IncomeStatement) SetGeneralAndAdministrativeExpenses(v float32) {
	o.GeneralAndAdministrativeExpenses = &v
}

// GetGrossProfit returns the GrossProfit field value if set, zero value otherwise.
func (o *IncomeStatement) GetGrossProfit() float32 {
	if o == nil || o.GrossProfit == nil {
		var ret float32
		return ret
	}
	return *o.GrossProfit
}

// GetGrossProfitOk returns a tuple with the GrossProfit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetGrossProfitOk() (*float32, bool) {
	if o == nil || o.GrossProfit == nil {
		return nil, false
	}
	return o.GrossProfit, true
}

// HasGrossProfit returns a boolean if a field has been set.
func (o *IncomeStatement) HasGrossProfit() bool {
	if o != nil && o.GrossProfit != nil {
		return true
	}

	return false
}

// SetGrossProfit gets a reference to the given float32 and assigns it to the GrossProfit field.
func (o *IncomeStatement) SetGrossProfit(v float32) {
	o.GrossProfit = &v
}

// GetGrossProfitRatio returns the GrossProfitRatio field value if set, zero value otherwise.
func (o *IncomeStatement) GetGrossProfitRatio() float32 {
	if o == nil || o.GrossProfitRatio == nil {
		var ret float32
		return ret
	}
	return *o.GrossProfitRatio
}

// GetGrossProfitRatioOk returns a tuple with the GrossProfitRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetGrossProfitRatioOk() (*float32, bool) {
	if o == nil || o.GrossProfitRatio == nil {
		return nil, false
	}
	return o.GrossProfitRatio, true
}

// HasGrossProfitRatio returns a boolean if a field has been set.
func (o *IncomeStatement) HasGrossProfitRatio() bool {
	if o != nil && o.GrossProfitRatio != nil {
		return true
	}

	return false
}

// SetGrossProfitRatio gets a reference to the given float32 and assigns it to the GrossProfitRatio field.
func (o *IncomeStatement) SetGrossProfitRatio(v float32) {
	o.GrossProfitRatio = &v
}

// GetIncomeBeforeTax returns the IncomeBeforeTax field value if set, zero value otherwise.
func (o *IncomeStatement) GetIncomeBeforeTax() float32 {
	if o == nil || o.IncomeBeforeTax == nil {
		var ret float32
		return ret
	}
	return *o.IncomeBeforeTax
}

// GetIncomeBeforeTaxOk returns a tuple with the IncomeBeforeTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetIncomeBeforeTaxOk() (*float32, bool) {
	if o == nil || o.IncomeBeforeTax == nil {
		return nil, false
	}
	return o.IncomeBeforeTax, true
}

// HasIncomeBeforeTax returns a boolean if a field has been set.
func (o *IncomeStatement) HasIncomeBeforeTax() bool {
	if o != nil && o.IncomeBeforeTax != nil {
		return true
	}

	return false
}

// SetIncomeBeforeTax gets a reference to the given float32 and assigns it to the IncomeBeforeTax field.
func (o *IncomeStatement) SetIncomeBeforeTax(v float32) {
	o.IncomeBeforeTax = &v
}

// GetIncomeBeforeTaxRatio returns the IncomeBeforeTaxRatio field value if set, zero value otherwise.
func (o *IncomeStatement) GetIncomeBeforeTaxRatio() float32 {
	if o == nil || o.IncomeBeforeTaxRatio == nil {
		var ret float32
		return ret
	}
	return *o.IncomeBeforeTaxRatio
}

// GetIncomeBeforeTaxRatioOk returns a tuple with the IncomeBeforeTaxRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetIncomeBeforeTaxRatioOk() (*float32, bool) {
	if o == nil || o.IncomeBeforeTaxRatio == nil {
		return nil, false
	}
	return o.IncomeBeforeTaxRatio, true
}

// HasIncomeBeforeTaxRatio returns a boolean if a field has been set.
func (o *IncomeStatement) HasIncomeBeforeTaxRatio() bool {
	if o != nil && o.IncomeBeforeTaxRatio != nil {
		return true
	}

	return false
}

// SetIncomeBeforeTaxRatio gets a reference to the given float32 and assigns it to the IncomeBeforeTaxRatio field.
func (o *IncomeStatement) SetIncomeBeforeTaxRatio(v float32) {
	o.IncomeBeforeTaxRatio = &v
}

// GetIncomeTaxExpense returns the IncomeTaxExpense field value if set, zero value otherwise.
func (o *IncomeStatement) GetIncomeTaxExpense() float32 {
	if o == nil || o.IncomeTaxExpense == nil {
		var ret float32
		return ret
	}
	return *o.IncomeTaxExpense
}

// GetIncomeTaxExpenseOk returns a tuple with the IncomeTaxExpense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetIncomeTaxExpenseOk() (*float32, bool) {
	if o == nil || o.IncomeTaxExpense == nil {
		return nil, false
	}
	return o.IncomeTaxExpense, true
}

// HasIncomeTaxExpense returns a boolean if a field has been set.
func (o *IncomeStatement) HasIncomeTaxExpense() bool {
	if o != nil && o.IncomeTaxExpense != nil {
		return true
	}

	return false
}

// SetIncomeTaxExpense gets a reference to the given float32 and assigns it to the IncomeTaxExpense field.
func (o *IncomeStatement) SetIncomeTaxExpense(v float32) {
	o.IncomeTaxExpense = &v
}

// GetInterestExpense returns the InterestExpense field value if set, zero value otherwise.
func (o *IncomeStatement) GetInterestExpense() float32 {
	if o == nil || o.InterestExpense == nil {
		var ret float32
		return ret
	}
	return *o.InterestExpense
}

// GetInterestExpenseOk returns a tuple with the InterestExpense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetInterestExpenseOk() (*float32, bool) {
	if o == nil || o.InterestExpense == nil {
		return nil, false
	}
	return o.InterestExpense, true
}

// HasInterestExpense returns a boolean if a field has been set.
func (o *IncomeStatement) HasInterestExpense() bool {
	if o != nil && o.InterestExpense != nil {
		return true
	}

	return false
}

// SetInterestExpense gets a reference to the given float32 and assigns it to the InterestExpense field.
func (o *IncomeStatement) SetInterestExpense(v float32) {
	o.InterestExpense = &v
}

// GetInterestIncome returns the InterestIncome field value if set, zero value otherwise.
func (o *IncomeStatement) GetInterestIncome() float32 {
	if o == nil || o.InterestIncome == nil {
		var ret float32
		return ret
	}
	return *o.InterestIncome
}

// GetInterestIncomeOk returns a tuple with the InterestIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetInterestIncomeOk() (*float32, bool) {
	if o == nil || o.InterestIncome == nil {
		return nil, false
	}
	return o.InterestIncome, true
}

// HasInterestIncome returns a boolean if a field has been set.
func (o *IncomeStatement) HasInterestIncome() bool {
	if o != nil && o.InterestIncome != nil {
		return true
	}

	return false
}

// SetInterestIncome gets a reference to the given float32 and assigns it to the InterestIncome field.
func (o *IncomeStatement) SetInterestIncome(v float32) {
	o.InterestIncome = &v
}

// GetInterestincome returns the Interestincome field value if set, zero value otherwise.
func (o *IncomeStatement) GetInterestincome() float32 {
	if o == nil || o.Interestincome == nil {
		var ret float32
		return ret
	}
	return *o.Interestincome
}

// GetInterestincomeOk returns a tuple with the Interestincome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetInterestincomeOk() (*float32, bool) {
	if o == nil || o.Interestincome == nil {
		return nil, false
	}
	return o.Interestincome, true
}

// HasInterestincome returns a boolean if a field has been set.
func (o *IncomeStatement) HasInterestincome() bool {
	if o != nil && o.Interestincome != nil {
		return true
	}

	return false
}

// SetInterestincome gets a reference to the given float32 and assigns it to the Interestincome field.
func (o *IncomeStatement) SetInterestincome(v float32) {
	o.Interestincome = &v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *IncomeStatement) GetLink() string {
	if o == nil || o.Link == nil {
		var ret string
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetLinkOk() (*string, bool) {
	if o == nil || o.Link == nil {
		return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *IncomeStatement) HasLink() bool {
	if o != nil && o.Link != nil {
		return true
	}

	return false
}

// SetLink gets a reference to the given string and assigns it to the Link field.
func (o *IncomeStatement) SetLink(v string) {
	o.Link = &v
}

// GetNetIncome returns the NetIncome field value if set, zero value otherwise.
func (o *IncomeStatement) GetNetIncome() float32 {
	if o == nil || o.NetIncome == nil {
		var ret float32
		return ret
	}
	return *o.NetIncome
}

// GetNetIncomeOk returns a tuple with the NetIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetNetIncomeOk() (*float32, bool) {
	if o == nil || o.NetIncome == nil {
		return nil, false
	}
	return o.NetIncome, true
}

// HasNetIncome returns a boolean if a field has been set.
func (o *IncomeStatement) HasNetIncome() bool {
	if o != nil && o.NetIncome != nil {
		return true
	}

	return false
}

// SetNetIncome gets a reference to the given float32 and assigns it to the NetIncome field.
func (o *IncomeStatement) SetNetIncome(v float32) {
	o.NetIncome = &v
}

// GetNetIncomeRatio returns the NetIncomeRatio field value if set, zero value otherwise.
func (o *IncomeStatement) GetNetIncomeRatio() float32 {
	if o == nil || o.NetIncomeRatio == nil {
		var ret float32
		return ret
	}
	return *o.NetIncomeRatio
}

// GetNetIncomeRatioOk returns a tuple with the NetIncomeRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetNetIncomeRatioOk() (*float32, bool) {
	if o == nil || o.NetIncomeRatio == nil {
		return nil, false
	}
	return o.NetIncomeRatio, true
}

// HasNetIncomeRatio returns a boolean if a field has been set.
func (o *IncomeStatement) HasNetIncomeRatio() bool {
	if o != nil && o.NetIncomeRatio != nil {
		return true
	}

	return false
}

// SetNetIncomeRatio gets a reference to the given float32 and assigns it to the NetIncomeRatio field.
func (o *IncomeStatement) SetNetIncomeRatio(v float32) {
	o.NetIncomeRatio = &v
}

// GetOperatingExpenses returns the OperatingExpenses field value if set, zero value otherwise.
func (o *IncomeStatement) GetOperatingExpenses() float32 {
	if o == nil || o.OperatingExpenses == nil {
		var ret float32
		return ret
	}
	return *o.OperatingExpenses
}

// GetOperatingExpensesOk returns a tuple with the OperatingExpenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetOperatingExpensesOk() (*float32, bool) {
	if o == nil || o.OperatingExpenses == nil {
		return nil, false
	}
	return o.OperatingExpenses, true
}

// HasOperatingExpenses returns a boolean if a field has been set.
func (o *IncomeStatement) HasOperatingExpenses() bool {
	if o != nil && o.OperatingExpenses != nil {
		return true
	}

	return false
}

// SetOperatingExpenses gets a reference to the given float32 and assigns it to the OperatingExpenses field.
func (o *IncomeStatement) SetOperatingExpenses(v float32) {
	o.OperatingExpenses = &v
}

// GetOperatingIncome returns the OperatingIncome field value if set, zero value otherwise.
func (o *IncomeStatement) GetOperatingIncome() float32 {
	if o == nil || o.OperatingIncome == nil {
		var ret float32
		return ret
	}
	return *o.OperatingIncome
}

// GetOperatingIncomeOk returns a tuple with the OperatingIncome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetOperatingIncomeOk() (*float32, bool) {
	if o == nil || o.OperatingIncome == nil {
		return nil, false
	}
	return o.OperatingIncome, true
}

// HasOperatingIncome returns a boolean if a field has been set.
func (o *IncomeStatement) HasOperatingIncome() bool {
	if o != nil && o.OperatingIncome != nil {
		return true
	}

	return false
}

// SetOperatingIncome gets a reference to the given float32 and assigns it to the OperatingIncome field.
func (o *IncomeStatement) SetOperatingIncome(v float32) {
	o.OperatingIncome = &v
}

// GetOperatingIncomeRatio returns the OperatingIncomeRatio field value if set, zero value otherwise.
func (o *IncomeStatement) GetOperatingIncomeRatio() float32 {
	if o == nil || o.OperatingIncomeRatio == nil {
		var ret float32
		return ret
	}
	return *o.OperatingIncomeRatio
}

// GetOperatingIncomeRatioOk returns a tuple with the OperatingIncomeRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetOperatingIncomeRatioOk() (*float32, bool) {
	if o == nil || o.OperatingIncomeRatio == nil {
		return nil, false
	}
	return o.OperatingIncomeRatio, true
}

// HasOperatingIncomeRatio returns a boolean if a field has been set.
func (o *IncomeStatement) HasOperatingIncomeRatio() bool {
	if o != nil && o.OperatingIncomeRatio != nil {
		return true
	}

	return false
}

// SetOperatingIncomeRatio gets a reference to the given float32 and assigns it to the OperatingIncomeRatio field.
func (o *IncomeStatement) SetOperatingIncomeRatio(v float32) {
	o.OperatingIncomeRatio = &v
}

// GetOtherExpenses returns the OtherExpenses field value if set, zero value otherwise.
func (o *IncomeStatement) GetOtherExpenses() float32 {
	if o == nil || o.OtherExpenses == nil {
		var ret float32
		return ret
	}
	return *o.OtherExpenses
}

// GetOtherExpensesOk returns a tuple with the OtherExpenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetOtherExpensesOk() (*float32, bool) {
	if o == nil || o.OtherExpenses == nil {
		return nil, false
	}
	return o.OtherExpenses, true
}

// HasOtherExpenses returns a boolean if a field has been set.
func (o *IncomeStatement) HasOtherExpenses() bool {
	if o != nil && o.OtherExpenses != nil {
		return true
	}

	return false
}

// SetOtherExpenses gets a reference to the given float32 and assigns it to the OtherExpenses field.
func (o *IncomeStatement) SetOtherExpenses(v float32) {
	o.OtherExpenses = &v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *IncomeStatement) GetPeriod() string {
	if o == nil || o.Period == nil {
		var ret string
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetPeriodOk() (*string, bool) {
	if o == nil || o.Period == nil {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *IncomeStatement) HasPeriod() bool {
	if o != nil && o.Period != nil {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given string and assigns it to the Period field.
func (o *IncomeStatement) SetPeriod(v string) {
	o.Period = &v
}

// GetReportedCurrency returns the ReportedCurrency field value if set, zero value otherwise.
func (o *IncomeStatement) GetReportedCurrency() string {
	if o == nil || o.ReportedCurrency == nil {
		var ret string
		return ret
	}
	return *o.ReportedCurrency
}

// GetReportedCurrencyOk returns a tuple with the ReportedCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetReportedCurrencyOk() (*string, bool) {
	if o == nil || o.ReportedCurrency == nil {
		return nil, false
	}
	return o.ReportedCurrency, true
}

// HasReportedCurrency returns a boolean if a field has been set.
func (o *IncomeStatement) HasReportedCurrency() bool {
	if o != nil && o.ReportedCurrency != nil {
		return true
	}

	return false
}

// SetReportedCurrency gets a reference to the given string and assigns it to the ReportedCurrency field.
func (o *IncomeStatement) SetReportedCurrency(v string) {
	o.ReportedCurrency = &v
}

// GetResearchAndDevelopmentExpenses returns the ResearchAndDevelopmentExpenses field value if set, zero value otherwise.
func (o *IncomeStatement) GetResearchAndDevelopmentExpenses() float32 {
	if o == nil || o.ResearchAndDevelopmentExpenses == nil {
		var ret float32
		return ret
	}
	return *o.ResearchAndDevelopmentExpenses
}

// GetResearchAndDevelopmentExpensesOk returns a tuple with the ResearchAndDevelopmentExpenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetResearchAndDevelopmentExpensesOk() (*float32, bool) {
	if o == nil || o.ResearchAndDevelopmentExpenses == nil {
		return nil, false
	}
	return o.ResearchAndDevelopmentExpenses, true
}

// HasResearchAndDevelopmentExpenses returns a boolean if a field has been set.
func (o *IncomeStatement) HasResearchAndDevelopmentExpenses() bool {
	if o != nil && o.ResearchAndDevelopmentExpenses != nil {
		return true
	}

	return false
}

// SetResearchAndDevelopmentExpenses gets a reference to the given float32 and assigns it to the ResearchAndDevelopmentExpenses field.
func (o *IncomeStatement) SetResearchAndDevelopmentExpenses(v float32) {
	o.ResearchAndDevelopmentExpenses = &v
}

// GetRevenue returns the Revenue field value if set, zero value otherwise.
func (o *IncomeStatement) GetRevenue() float32 {
	if o == nil || o.Revenue == nil {
		var ret float32
		return ret
	}
	return *o.Revenue
}

// GetRevenueOk returns a tuple with the Revenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetRevenueOk() (*float32, bool) {
	if o == nil || o.Revenue == nil {
		return nil, false
	}
	return o.Revenue, true
}

// HasRevenue returns a boolean if a field has been set.
func (o *IncomeStatement) HasRevenue() bool {
	if o != nil && o.Revenue != nil {
		return true
	}

	return false
}

// SetRevenue gets a reference to the given float32 and assigns it to the Revenue field.
func (o *IncomeStatement) SetRevenue(v float32) {
	o.Revenue = &v
}

// GetSellingAndMarketingExpenses returns the SellingAndMarketingExpenses field value if set, zero value otherwise.
func (o *IncomeStatement) GetSellingAndMarketingExpenses() float32 {
	if o == nil || o.SellingAndMarketingExpenses == nil {
		var ret float32
		return ret
	}
	return *o.SellingAndMarketingExpenses
}

// GetSellingAndMarketingExpensesOk returns a tuple with the SellingAndMarketingExpenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetSellingAndMarketingExpensesOk() (*float32, bool) {
	if o == nil || o.SellingAndMarketingExpenses == nil {
		return nil, false
	}
	return o.SellingAndMarketingExpenses, true
}

// HasSellingAndMarketingExpenses returns a boolean if a field has been set.
func (o *IncomeStatement) HasSellingAndMarketingExpenses() bool {
	if o != nil && o.SellingAndMarketingExpenses != nil {
		return true
	}

	return false
}

// SetSellingAndMarketingExpenses gets a reference to the given float32 and assigns it to the SellingAndMarketingExpenses field.
func (o *IncomeStatement) SetSellingAndMarketingExpenses(v float32) {
	o.SellingAndMarketingExpenses = &v
}

// GetSellingGeneralAndAdministrativeExpenses returns the SellingGeneralAndAdministrativeExpenses field value if set, zero value otherwise.
func (o *IncomeStatement) GetSellingGeneralAndAdministrativeExpenses() float32 {
	if o == nil || o.SellingGeneralAndAdministrativeExpenses == nil {
		var ret float32
		return ret
	}
	return *o.SellingGeneralAndAdministrativeExpenses
}

// GetSellingGeneralAndAdministrativeExpensesOk returns a tuple with the SellingGeneralAndAdministrativeExpenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetSellingGeneralAndAdministrativeExpensesOk() (*float32, bool) {
	if o == nil || o.SellingGeneralAndAdministrativeExpenses == nil {
		return nil, false
	}
	return o.SellingGeneralAndAdministrativeExpenses, true
}

// HasSellingGeneralAndAdministrativeExpenses returns a boolean if a field has been set.
func (o *IncomeStatement) HasSellingGeneralAndAdministrativeExpenses() bool {
	if o != nil && o.SellingGeneralAndAdministrativeExpenses != nil {
		return true
	}

	return false
}

// SetSellingGeneralAndAdministrativeExpenses gets a reference to the given float32 and assigns it to the SellingGeneralAndAdministrativeExpenses field.
func (o *IncomeStatement) SetSellingGeneralAndAdministrativeExpenses(v float32) {
	o.SellingGeneralAndAdministrativeExpenses = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *IncomeStatement) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *IncomeStatement) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *IncomeStatement) SetSymbol(v string) {
	o.Symbol = &v
}

// GetTotalOtherIncomeExpensesNet returns the TotalOtherIncomeExpensesNet field value if set, zero value otherwise.
func (o *IncomeStatement) GetTotalOtherIncomeExpensesNet() float32 {
	if o == nil || o.TotalOtherIncomeExpensesNet == nil {
		var ret float32
		return ret
	}
	return *o.TotalOtherIncomeExpensesNet
}

// GetTotalOtherIncomeExpensesNetOk returns a tuple with the TotalOtherIncomeExpensesNet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetTotalOtherIncomeExpensesNetOk() (*float32, bool) {
	if o == nil || o.TotalOtherIncomeExpensesNet == nil {
		return nil, false
	}
	return o.TotalOtherIncomeExpensesNet, true
}

// HasTotalOtherIncomeExpensesNet returns a boolean if a field has been set.
func (o *IncomeStatement) HasTotalOtherIncomeExpensesNet() bool {
	if o != nil && o.TotalOtherIncomeExpensesNet != nil {
		return true
	}

	return false
}

// SetTotalOtherIncomeExpensesNet gets a reference to the given float32 and assigns it to the TotalOtherIncomeExpensesNet field.
func (o *IncomeStatement) SetTotalOtherIncomeExpensesNet(v float32) {
	o.TotalOtherIncomeExpensesNet = &v
}

// GetWeightedAverageShsOut returns the WeightedAverageShsOut field value if set, zero value otherwise.
func (o *IncomeStatement) GetWeightedAverageShsOut() float32 {
	if o == nil || o.WeightedAverageShsOut == nil {
		var ret float32
		return ret
	}
	return *o.WeightedAverageShsOut
}

// GetWeightedAverageShsOutOk returns a tuple with the WeightedAverageShsOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetWeightedAverageShsOutOk() (*float32, bool) {
	if o == nil || o.WeightedAverageShsOut == nil {
		return nil, false
	}
	return o.WeightedAverageShsOut, true
}

// HasWeightedAverageShsOut returns a boolean if a field has been set.
func (o *IncomeStatement) HasWeightedAverageShsOut() bool {
	if o != nil && o.WeightedAverageShsOut != nil {
		return true
	}

	return false
}

// SetWeightedAverageShsOut gets a reference to the given float32 and assigns it to the WeightedAverageShsOut field.
func (o *IncomeStatement) SetWeightedAverageShsOut(v float32) {
	o.WeightedAverageShsOut = &v
}

// GetWeightedAverageShsOutDil returns the WeightedAverageShsOutDil field value if set, zero value otherwise.
func (o *IncomeStatement) GetWeightedAverageShsOutDil() float32 {
	if o == nil || o.WeightedAverageShsOutDil == nil {
		var ret float32
		return ret
	}
	return *o.WeightedAverageShsOutDil
}

// GetWeightedAverageShsOutDilOk returns a tuple with the WeightedAverageShsOutDil field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatement) GetWeightedAverageShsOutDilOk() (*float32, bool) {
	if o == nil || o.WeightedAverageShsOutDil == nil {
		return nil, false
	}
	return o.WeightedAverageShsOutDil, true
}

// HasWeightedAverageShsOutDil returns a boolean if a field has been set.
func (o *IncomeStatement) HasWeightedAverageShsOutDil() bool {
	if o != nil && o.WeightedAverageShsOutDil != nil {
		return true
	}

	return false
}

// SetWeightedAverageShsOutDil gets a reference to the given float32 and assigns it to the WeightedAverageShsOutDil field.
func (o *IncomeStatement) SetWeightedAverageShsOutDil(v float32) {
	o.WeightedAverageShsOutDil = &v
}

func (o IncomeStatement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AcceptedDate != nil {
		toSerialize["acceptedDate"] = o.AcceptedDate
	}
	if o.CalendarYear != nil {
		toSerialize["calendarYear"] = o.CalendarYear
	}
	if o.Cik != nil {
		toSerialize["cik"] = o.Cik
	}
	if o.CostAndExpenses != nil {
		toSerialize["costAndExpenses"] = o.CostAndExpenses
	}
	if o.CostOfRevenue != nil {
		toSerialize["costOfRevenue"] = o.CostOfRevenue
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if o.DepreciationAndAmortization != nil {
		toSerialize["depreciationAndAmortization"] = o.DepreciationAndAmortization
	}
	if o.Ebitda != nil {
		toSerialize["ebitda"] = o.Ebitda
	}
	if o.Ebitdaratio != nil {
		toSerialize["ebitdaratio"] = o.Ebitdaratio
	}
	if o.Eps != nil {
		toSerialize["eps"] = o.Eps
	}
	if o.Epsdiluted != nil {
		toSerialize["epsdiluted"] = o.Epsdiluted
	}
	if o.FillingDate != nil {
		toSerialize["fillingDate"] = o.FillingDate
	}
	if o.FinalLink != nil {
		toSerialize["finalLink"] = o.FinalLink
	}
	if o.GeneralAndAdministrativeExpenses != nil {
		toSerialize["generalAndAdministrativeExpenses"] = o.GeneralAndAdministrativeExpenses
	}
	if o.GrossProfit != nil {
		toSerialize["grossProfit"] = o.GrossProfit
	}
	if o.GrossProfitRatio != nil {
		toSerialize["grossProfitRatio"] = o.GrossProfitRatio
	}
	if o.IncomeBeforeTax != nil {
		toSerialize["incomeBeforeTax"] = o.IncomeBeforeTax
	}
	if o.IncomeBeforeTaxRatio != nil {
		toSerialize["incomeBeforeTaxRatio"] = o.IncomeBeforeTaxRatio
	}
	if o.IncomeTaxExpense != nil {
		toSerialize["incomeTaxExpense"] = o.IncomeTaxExpense
	}
	if o.InterestExpense != nil {
		toSerialize["interestExpense"] = o.InterestExpense
	}
	if o.InterestIncome != nil {
		toSerialize["interestIncome"] = o.InterestIncome
	}
	if o.Interestincome != nil {
		toSerialize["interestincome"] = o.Interestincome
	}
	if o.Link != nil {
		toSerialize["link"] = o.Link
	}
	if o.NetIncome != nil {
		toSerialize["netIncome"] = o.NetIncome
	}
	if o.NetIncomeRatio != nil {
		toSerialize["netIncomeRatio"] = o.NetIncomeRatio
	}
	if o.OperatingExpenses != nil {
		toSerialize["operatingExpenses"] = o.OperatingExpenses
	}
	if o.OperatingIncome != nil {
		toSerialize["operatingIncome"] = o.OperatingIncome
	}
	if o.OperatingIncomeRatio != nil {
		toSerialize["operatingIncomeRatio"] = o.OperatingIncomeRatio
	}
	if o.OtherExpenses != nil {
		toSerialize["otherExpenses"] = o.OtherExpenses
	}
	if o.Period != nil {
		toSerialize["period"] = o.Period
	}
	if o.ReportedCurrency != nil {
		toSerialize["reportedCurrency"] = o.ReportedCurrency
	}
	if o.ResearchAndDevelopmentExpenses != nil {
		toSerialize["researchAndDevelopmentExpenses"] = o.ResearchAndDevelopmentExpenses
	}
	if o.Revenue != nil {
		toSerialize["revenue"] = o.Revenue
	}
	if o.SellingAndMarketingExpenses != nil {
		toSerialize["sellingAndMarketingExpenses"] = o.SellingAndMarketingExpenses
	}
	if o.SellingGeneralAndAdministrativeExpenses != nil {
		toSerialize["sellingGeneralAndAdministrativeExpenses"] = o.SellingGeneralAndAdministrativeExpenses
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.TotalOtherIncomeExpensesNet != nil {
		toSerialize["totalOtherIncomeExpensesNet"] = o.TotalOtherIncomeExpensesNet
	}
	if o.WeightedAverageShsOut != nil {
		toSerialize["weightedAverageShsOut"] = o.WeightedAverageShsOut
	}
	if o.WeightedAverageShsOutDil != nil {
		toSerialize["weightedAverageShsOutDil"] = o.WeightedAverageShsOutDil
	}
	return json.Marshal(toSerialize)
}

type NullableIncomeStatement struct {
	value *IncomeStatement
	isSet bool
}

func (v NullableIncomeStatement) Get() *IncomeStatement {
	return v.value
}

func (v *NullableIncomeStatement) Set(val *IncomeStatement) {
	v.value = val
	v.isSet = true
}

func (v NullableIncomeStatement) IsSet() bool {
	return v.isSet
}

func (v *NullableIncomeStatement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncomeStatement(val *IncomeStatement) *NullableIncomeStatement {
	return &NullableIncomeStatement{value: val, isSet: true}
}

func (v NullableIncomeStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncomeStatement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
