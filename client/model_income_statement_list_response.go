/*
Financial Modeling Prep API

FMP provides one of the most accurate data available on the market. Every endpoint is available in JSON format and most of them also in CSV format. Data is coming right from SEC filings after being serialized by us. Our API has over 50 endpoints and we are still growing by adding new endpoints every week. We also provide on demand custom endpoint available for our business clients.

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// IncomeStatementListResponse struct for IncomeStatementListResponse
type IncomeStatementListResponse struct {
	Data []IncomeStatement `json:"data,omitempty"`
}

// NewIncomeStatementListResponse instantiates a new IncomeStatementListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncomeStatementListResponse() *IncomeStatementListResponse {
	this := IncomeStatementListResponse{}
	return &this
}

// NewIncomeStatementListResponseWithDefaults instantiates a new IncomeStatementListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncomeStatementListResponseWithDefaults() *IncomeStatementListResponse {
	this := IncomeStatementListResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *IncomeStatementListResponse) GetData() []IncomeStatement {
	if o == nil || o.Data == nil {
		var ret []IncomeStatement
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IncomeStatementListResponse) GetDataOk() ([]IncomeStatement, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *IncomeStatementListResponse) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []IncomeStatement and assigns it to the Data field.
func (o *IncomeStatementListResponse) SetData(v []IncomeStatement) {
	o.Data = v
}

func (o IncomeStatementListResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableIncomeStatementListResponse struct {
	value *IncomeStatementListResponse
	isSet bool
}

func (v NullableIncomeStatementListResponse) Get() *IncomeStatementListResponse {
	return v.value
}

func (v *NullableIncomeStatementListResponse) Set(val *IncomeStatementListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableIncomeStatementListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableIncomeStatementListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncomeStatementListResponse(val *IncomeStatementListResponse) *NullableIncomeStatementListResponse {
	return &NullableIncomeStatementListResponse{value: val, isSet: true}
}

func (v NullableIncomeStatementListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncomeStatementListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
